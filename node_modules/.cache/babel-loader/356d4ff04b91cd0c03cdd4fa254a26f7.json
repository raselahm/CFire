{"ast":null,"code":"var _jsxFileName = \"D:\\\\School\\\\sprint-4\\\\src\\\\Component\\\\Postpage\\\\PostPage.js\";\nimport React from \"react\";\nimport Navbar from \"../NavBar/Navbar\";\nimport './PostPage.css';\nimport Comment from \"./Comment\";\nimport DeletePostModal from \"./DeletePostModal\";\n\nclass PostPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.postComment = event => {\n      event.preventDefault();\n      fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/postcontroller.php\", {\n        method: \"post\",\n        body: JSON.stringify({\n          action: \"addOrEditPosts\",\n          posttype: \"comment\",\n          session_token: sessionStorage.getItem(\"token\"),\n          userid: sessionStorage.getItem(\"user\"),\n          user_id: sessionStorage.getItem(\"user\"),\n          posttext: this.state.comment_submit_text,\n          parentid: this.props.location.aboutProps.post.post_id\n        })\n      }).then(res => res.json()).then(result => {\n        if (result.status) {\n          console.log(\"Posted\");\n        }\n\n        this.loadComments();\n      }, error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n    };\n\n    this.submitEditPost = event => {\n      event.preventDefault();\n      const timestamp = Date.now(); // This would be the timestamp you want to format\n\n      console.log(new Intl.DateTimeFormat('en-US', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      }).format(timestamp));\n      fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/postcontroller.php\", {\n        method: \"post\",\n        body: JSON.stringify({\n          action: \"addOrEditPosts\",\n          session_token: sessionStorage.getItem(\"token\"),\n          userid: sessionStorage.getItem(\"user\"),\n          user_id: sessionStorage.getItem(\"user\"),\n          posttext: this.state.post_submit_text,\n          posttype: \"post\",\n          postid: this.props.location.aboutProps.post.post_id,\n          timestamp: this.props.location.aboutProps.post.timestamp\n        })\n      }).then(res => res.json()).then(result => {\n        if (result.status) {\n          console.log(\"Posted\");\n        }\n      }, error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n    };\n\n    this.changeState = e => {\n      if (this.state.edit) {\n        this.setState({\n          edit: !this.state.edit,\n          buttonName: \"Edit\"\n        });\n      } else {\n        this.setState({\n          edit: !this.state.edit,\n          buttonName: \"Cancel\"\n        });\n      }\n    };\n\n    this.onClose = e => {\n      this.props.onClose && this.props.onClose(e);\n    };\n\n    this.commentChangeHandler = event => {\n      this.setState({\n        comment_submit_text: event.target.value\n      });\n    };\n\n    this.postEditChangeHandler = event => {\n      this.setState({\n        post_submit_text: event.target.value\n      });\n    };\n\n    this.state = {\n      showModal: false,\n      posttext: \"\",\n      comment_submit_text: \"\",\n      post_submit_text: \"\",\n      comments: [],\n      edit: false,\n      buttonName: \"Edit\",\n      deleteModal: false\n    };\n    this.loadComments();\n  }\n\n  loadComments() {\n    fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/postcontroller.php\", {\n      method: \"post\",\n      body: JSON.stringify({\n        action: \"getPosts\",\n        posttype: \"comment\",\n        max_posts: \"12\",\n        parentid: this.props.location.aboutProps.post.post_id\n      })\n    }).then(res => res.json()).then(result => {\n      if (result.posts) {\n        this.setState({\n          comments: result.posts\n        });\n      }\n    }, error => {\n      this.setState({\n        error\n      });\n    });\n  }\n\n  postOwner() {\n    if (sessionStorage.getItem(\"user\") === this.props.location.aboutProps.post.user_id) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.changeState,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }\n      }, this.state.buttonName), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: e => deleteState(this, e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }\n      }, \"Delete\"), /*#__PURE__*/React.createElement(DeletePostModal, {\n        show: this.state.deleteModal,\n        onClose: e => deleteState(this, e),\n        post: this.props.location.aboutProps.post,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  editDisplay() {\n    if (this.state.edit) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        onChange: this.postEditChangeHandler,\n        defaultValue: this.props.location.aboutProps.post.post_text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.submitEditPost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }\n      }, \" Submit Edit Post\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 20\n        }\n      }, this.props.location.aboutProps.post.post_text);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"homepage-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"postpage-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }, \"d\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"postpage-post\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    }, this.editDisplay()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"postpage-comments\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"postpage-comment-submission\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.commentChangeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.postComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 29\n      }\n    }, \"submit\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"postpage-comment-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 25\n      }\n    }, this.state.comments.map(comment => /*#__PURE__*/React.createElement(Comment, {\n      comment: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 33\n      }\n    })))), this.postOwner()));\n  }\n\n}\n\nfunction deleteState(app) {\n  app.setState({\n    deleteModal: !app.state.deleteModal\n  });\n}\n\nexport default PostPage;","map":{"version":3,"sources":["D:/School/sprint-4/src/Component/Postpage/PostPage.js"],"names":["React","Navbar","Comment","DeletePostModal","PostPage","Component","constructor","props","postComment","event","preventDefault","fetch","method","body","JSON","stringify","action","posttype","session_token","sessionStorage","getItem","userid","user_id","posttext","state","comment_submit_text","parentid","location","aboutProps","post","post_id","then","res","json","result","status","console","log","loadComments","error","setState","isLoaded","submitEditPost","timestamp","Date","now","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","post_submit_text","postid","changeState","e","edit","buttonName","onClose","commentChangeHandler","target","value","postEditChangeHandler","showModal","comments","deleteModal","max_posts","posts","postOwner","deleteState","editDisplay","post_text","render","map","comment","app"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Navbar from \"../NavBar/Navbar\";\r\nimport './PostPage.css'\r\nimport Comment from \"./Comment\";\r\nimport DeletePostModal from \"./DeletePostModal\";\r\n\r\n\r\nclass PostPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showModal: false,\r\n            posttext: \"\",\r\n            comment_submit_text: \"\",\r\n            post_submit_text:\"\",\r\n            comments: [],\r\n            edit: false,\r\n            buttonName: \"Edit\",\r\n            deleteModal: false\r\n        };\r\n        this.loadComments();\r\n    }\r\n\r\n    loadComments() {\r\n        fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/postcontroller.php\", {\r\n            method: \"post\",\r\n            body: JSON.stringify({\r\n                action: \"getPosts\",\r\n                posttype: \"comment\",\r\n                max_posts: \"12\",\r\n                parentid: this.props.location.aboutProps.post.post_id\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(\r\n                result => {\r\n                    if (result.posts) {\r\n                        this.setState({\r\n                            comments: result.posts\r\n                        });\r\n                    }\r\n                },\r\n                error => {\r\n                    this.setState({\r\n                        error\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    postComment = event => {\r\n        event.preventDefault();\r\n        fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/postcontroller.php\", {\r\n            method: \"post\",\r\n            body: JSON.stringify({\r\n                action: \"addOrEditPosts\",\r\n                posttype: \"comment\",\r\n                session_token: sessionStorage.getItem(\"token\"),\r\n                userid: sessionStorage.getItem(\"user\"),\r\n                user_id: sessionStorage.getItem(\"user\"),\r\n                posttext: this.state.comment_submit_text,\r\n                parentid: this.props.location.aboutProps.post.post_id\r\n\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(\r\n                result => {\r\n                    if (result.status) {\r\n                        console.log(\"Posted\");\r\n                    }\r\n                    this.loadComments();\r\n                },\r\n                error => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    submitEditPost = event => {\r\n        event.preventDefault();\r\n        const timestamp = Date.now(); // This would be the timestamp you want to format\r\n        console.log(new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(timestamp));\r\n        fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/postcontroller.php\", {\r\n            method: \"post\",\r\n            body: JSON.stringify({\r\n                action: \"addOrEditPosts\",\r\n                session_token: sessionStorage.getItem(\"token\"),\r\n                userid: sessionStorage.getItem(\"user\"),\r\n                user_id: sessionStorage.getItem(\"user\"),\r\n                posttext: this.state.post_submit_text,\r\n                posttype:\"post\",\r\n                postid: this.props.location.aboutProps.post.post_id,\r\n                timestamp: this.props.location.aboutProps.post.timestamp\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(\r\n                result => {\r\n                    if (result.status) {\r\n                        console.log(\"Posted\");\r\n                    }\r\n                },\r\n                error => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    postOwner() {\r\n        if (sessionStorage.getItem(\"user\") === this.props.location.aboutProps.post.user_id) {\r\n            return (\r\n                <div>\r\n                    <button onClick={this.changeState}>{this.state.buttonName}</button>\r\n                    <button  onClick={e => deleteState(this, e)}>Delete</button>\r\n                    <DeletePostModal show={this.state.deleteModal} onClose={e => deleteState(this, e)} post={this.props.location.aboutProps.post} />\r\n\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    editDisplay() {\r\n        if (this.state.edit) {\r\n            return (\r\n                <div>\r\n                    <input  type=\"text\" onChange={this.postEditChangeHandler} defaultValue={this.props.location.aboutProps.post.post_text}/>\r\n                    <button onClick={this.submitEditPost}> Submit Edit Post</button>\r\n                </div>\r\n            );\r\n        } else {\r\n            return <div>\r\n                {this.props.location.aboutProps.post.post_text}\r\n\r\n            </div>\r\n        }\r\n    }\r\n\r\n    changeState = e => {\r\n        if (this.state.edit) {\r\n            this.setState({\r\n                edit: !this.state.edit,\r\n                buttonName: \"Edit\"\r\n            });\r\n        }else{\r\n            this.setState({\r\n                edit: !this.state.edit,\r\n                buttonName: \"Cancel\"\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    onClose = e => {\r\n        this.props.onClose && this.props.onClose(e);\r\n    };\r\n\r\n\r\n\r\n    commentChangeHandler = event => {\r\n        this.setState({\r\n            comment_submit_text: event.target.value\r\n        });\r\n    }\r\n\r\n    postEditChangeHandler = event =>{\r\n        this.setState({\r\n            post_submit_text: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"homepage-main\">\r\n                <Navbar/>\r\n                <div className=\"postpage-main\">\r\n                    d\r\n                    <div className=\"postpage-post\">\r\n                        {this.editDisplay()}\r\n                    </div>\r\n                    <div className=\"postpage-comments\">\r\n                        <div className=\"postpage-comment-submission\">\r\n                            <input onChange={this.commentChangeHandler}/>\r\n                            <button onClick={this.postComment}>submit</button>\r\n                        </div>\r\n                        <div className=\"postpage-comment-list\">\r\n                            {this.state.comments.map(comment => (\r\n                                <Comment comment={comment}/>\r\n                            ))}\r\n\r\n                        </div>\r\n                    </div>\r\n                    {this.postOwner()}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nfunction deleteState(app){\r\n    app.setState({\r\n        deleteModal: !app.state.deleteModal\r\n    });\r\n}\r\nexport default PostPage;"]},"metadata":{},"sourceType":"module"}