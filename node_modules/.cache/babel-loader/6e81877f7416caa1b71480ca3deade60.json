{"ast":null,"code":"var _jsxFileName = \"/Users/waseehaque/Codes/CS Projects/black-hole-industries/src/Component/MessagePage.js\";\nimport React from \"react\";\nimport \"../MessagePage.css\";\nimport MessagePageFriend from \"./MessagePageFriend\";\nimport MessagePageMessages from \"./MessagePageMessages\";\nimport MessagePageInput from \"./MessagePageInput\";\nimport Message from \"./Message\";\nimport Navbar from \"./Navbar\";\nexport default class MessagePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/messagecontroller.php\", {\n        method: \"post\",\n        body: JSON.stringify({\n          action: \"addOrEditMessages\",\n          user_id: sessionStorage.getItem(\"user\"),\n          session_token: sessionStorage.getItem(\"token\"),\n          recipientid: this.state.recipientid,\n          message: this.state.messageText,\n          userid: sessionStorage.getItem(\"user\")\n        })\n      }).then(res => res.json()).then(result => {\n        this.setState({//messageText: result.Status\n        });\n        this.loadMessages();\n      }, error => {\n        alert(\"error!\");\n      });\n    };\n\n    this.getConversations = event => {\n      fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/messagecontroller.php\", {\n        method: \"post\",\n        body: JSON.stringify({\n          action: \"getConversations\",\n          userid: sessionStorage.getItem(\"user\")\n        })\n      }).then(res => res.json()).then(result => {\n        if (result.recipient_ids) {\n          this.setState({\n            conversations: result.recipient_ids\n          });\n        }\n      }, error => {\n        alert(\"error!\");\n      });\n    };\n\n    this.myChangeHandler = event => {\n      this.setState({\n        messageText: event.target.value\n      });\n    };\n\n    this.getRecip = this.getRecip.bind(this);\n    this.state = {\n      isLoaded: false,\n      error: null,\n      userid: \"UserName\",\n      recipientid: \"\",\n      recipientName: \"\",\n      senderName: \"\",\n      messageText: \"\",\n      messages: [],\n      conversations: []\n    };\n    this.getConversations();\n  }\n\n  loadMessages() {\n    var firstRequest = [];\n    var secondRequest = [];\n    fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/messagecontroller.php\", {\n      method: \"post\",\n      body: JSON.stringify({\n        action: \"getMessages\",\n        userid: sessionStorage.getItem(\"user\"),\n        session_token: sessionStorage.getItem(\"token\"),\n        user_id: sessionStorage.getItem(\"user\"),\n        recipientid: this.state.recipientid\n      })\n    }).then(res => res.json()).then(result => {\n      if (result.messages) {\n        firstRequest = result.messages;\n      }\n    }, error => {\n      this.setState({\n        error\n      });\n    });\n    fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/messagecontroller.php\", {\n      method: \"post\",\n      body: JSON.stringify({\n        action: \"getMessages\",\n        userid: this.state.recipientid,\n        session_token: sessionStorage.getItem(\"token\"),\n        user_id: sessionStorage.getItem(\"user\"),\n        recipientid: sessionStorage.getItem(\"user\")\n      })\n    }).then(res => res.json()).then(result => {\n      if (result.messages) {\n        secondRequest = result.messages;\n      }\n\n      var temp = firstRequest.concat(secondRequest);\n      var sortable = [];\n      var i;\n\n      for (i = 0; i < temp.length; i++) {\n        sortable.push([temp[i], temp[i].message_id]);\n      }\n\n      sortable.sort(function (a, b) {\n        return a[1] - b[1];\n      });\n      this.setState({\n        messages: sortable\n      });\n    }, error => {\n      this.setState({\n        error\n      });\n    });\n  }\n\n  getNames() {\n    fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/usercontroller.php\", {\n      method: \"post\",\n      body: JSON.stringify({\n        action: \"getUsers\",\n        userid: this.state.recipientid\n      })\n    }).then(res => res.json()).then(result => {\n      if (result.users) {\n        this.setState({\n          recipientName: result.users[0].username\n        });\n      }\n    }, error => {\n      alert(\"error!\");\n    });\n    fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/usercontroller.php\", {\n      method: \"post\",\n      body: JSON.stringify({\n        action: \"getUsers\",\n        userid: sessionStorage.getItem(\"user\")\n      })\n    }).then(res => res.json()).then(result => {\n      if (result.users) {\n        this.setState({\n          senderName: result.users[0].username\n        });\n      }\n    }, error => {\n      alert(\"error!\");\n    });\n  }\n\n  getRecip(evt) {\n    this.setState({\n      recipientid: evt\n    });\n    this.getNames();\n    this.loadMessages();\n  }\n\n  displayUsername(id) {\n    console.log(\"ID\" + id);\n    console.log(this.state.recipientName);\n\n    if (id === this.state.recipientid) {\n      return this.state.recipientName;\n    }\n\n    if (id === sessionStorage.getItem(\"user\")) {\n      return this.state.senderName;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"messagePage-settings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"messagePage-main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"messagePage-friends\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, this.state.conversations.map(conversation => React.createElement(MessagePageFriend, {\n      convo: conversation,\n      func: this.getRecip,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"messagePage-messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"messagePagemessages-messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, this.state.messages.map(message => React.createElement(Message, {\n      text: message[0],\n      userName: this.displayUsername(message[0].user_id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"messagePageInput-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: \"messagePageInput-textArea\",\n      rows: \"4\",\n      cols: \"150\",\n      onChange: this.myChangeHandler,\n      defaultValue: \"Input your stuff here...........\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"messagePageInput-send\",\n      onClick: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Send\")))));\n  }\n\n}","map":{"version":3,"sources":["/Users/waseehaque/Codes/CS Projects/black-hole-industries/src/Component/MessagePage.js"],"names":["React","MessagePageFriend","MessagePageMessages","MessagePageInput","Message","Navbar","MessagePage","Component","constructor","props","submitHandler","event","preventDefault","fetch","method","body","JSON","stringify","action","user_id","sessionStorage","getItem","session_token","recipientid","state","message","messageText","userid","then","res","json","result","setState","loadMessages","error","alert","getConversations","recipient_ids","conversations","myChangeHandler","target","value","getRecip","bind","isLoaded","recipientName","senderName","messages","firstRequest","secondRequest","temp","concat","sortable","i","length","push","message_id","sort","a","b","getNames","users","username","evt","displayUsername","id","console","log","render","map","conversation"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../MessagePage.css\";\nimport MessagePageFriend from \"./MessagePageFriend\";\nimport MessagePageMessages from \"./MessagePageMessages\";\nimport MessagePageInput from \"./MessagePageInput\";\nimport Message from \"./Message\";\nimport Navbar from \"./Navbar\";\n\nexport default class MessagePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getRecip = this.getRecip.bind(this);\n        this.state = {\n            isLoaded: false,\n            error: null,\n            userid: \"UserName\",\n            recipientid: \"\",\n\n            recipientName:\"\",\n            senderName: \"\",\n\n            messageText: \"\",\n            messages: [],\n            conversations: []\n        };\n\n        this.getConversations();\n    }\n\n    loadMessages() {\n\n        var firstRequest = [];\n        var secondRequest = [];\n\n        fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/messagecontroller.php\", {\n            method: \"post\",\n            body: JSON.stringify({\n                action: \"getMessages\",\n                userid: sessionStorage.getItem(\"user\"),\n                session_token: sessionStorage.getItem(\"token\"),\n                user_id: sessionStorage.getItem(\"user\"),\n                recipientid: this.state.recipientid\n            })\n        })\n            .then(res => res.json())\n            .then(\n                result => {\n                    if (result.messages) {\n\n                        firstRequest = result.messages;\n\n                    }\n                },\n                error => {\n                    this.setState({\n                        error\n                    });\n                }\n            );\n        fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/messagecontroller.php\", {\n            method: \"post\",\n            body: JSON.stringify({\n                action: \"getMessages\",\n                userid: this.state.recipientid,\n                session_token: sessionStorage.getItem(\"token\"),\n                user_id: sessionStorage.getItem(\"user\"),\n                recipientid: sessionStorage.getItem(\"user\")\n            })\n        })\n            .then(res => res.json())\n            .then(\n                result => {\n                    if (result.messages) {\n                        secondRequest = result.messages;\n\n                    }\n                    var temp = firstRequest.concat(secondRequest);\n                    var sortable = [];\n                    var i;\n                    for( i = 0; i < temp.length; i++){\n                        sortable.push([temp[i],temp[i].message_id]);\n                    }\n\n                    sortable.sort(function(a, b) {\n                        return a[1] - b[1];\n                    });\n                    this.setState({\n                        messages: sortable\n                    });\n\n                },\n                error => {\n                    this.setState({\n                        error\n                    });\n                }\n            );\n\n    }\n\n    submitHandler = event => {\n        event.preventDefault();\n        fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/messagecontroller.php\", {\n            method: \"post\",\n            body: JSON.stringify({\n                action: \"addOrEditMessages\",\n                user_id: sessionStorage.getItem(\"user\"),\n                session_token: sessionStorage.getItem(\"token\"),\n                recipientid: this.state.recipientid,\n                message: this.state.messageText,\n                userid: sessionStorage.getItem(\"user\")\n            })\n        })\n            .then(res => res.json())\n            .then(\n                result => {\n                    this.setState({\n                        //messageText: result.Status\n                    });\n                    this.loadMessages();\n                },\n                error => {\n                    alert(\"error!\");\n                }\n            );\n    };\n\n    getConversations = event => {\n        fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/messagecontroller.php\", {\n            method: \"post\",\n            body: JSON.stringify({\n                action: \"getConversations\",\n                userid: sessionStorage.getItem(\"user\")\n            })\n        })\n            .then(res => res.json())\n            .then(\n                result => {\n\n                    if(result.recipient_ids) {\n                        this.setState({\n                            conversations: result.recipient_ids\n                        });\n                    }\n                },\n                error => {\n                    alert(\"error!\");\n                }\n            );\n    };\n\n\n    getNames(){\n        fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/usercontroller.php\", {\n            method: \"post\",\n            body: JSON.stringify({\n                action: \"getUsers\",\n                userid: this.state.recipientid\n            })\n        })\n            .then(res => res.json())\n            .then(\n                result => {\n                    if(result.users){\n                        this.setState({\n                            recipientName: result.users[0].username\n\n                        });\n                    }\n                },\n                error => {\n                    alert(\"error!\");\n                }\n            );\n\n        fetch(\"http://stark.cse.buffalo.edu/cse410/blackhole/api/usercontroller.php\", {\n            method: \"post\",\n            body: JSON.stringify({\n                action: \"getUsers\",\n                userid: sessionStorage.getItem(\"user\")\n            })\n        })\n            .then(res => res.json())\n            .then(\n                result => {\n                    if(result.users){\n                        this.setState({\n                            senderName: result.users[0].username\n                        });\n                    }\n\n                },\n                error => {\n                    alert(\"error!\");\n                }\n            );\n    };\n\n    getRecip(evt) {\n\n        this.setState({\n            recipientid: evt\n        });\n        this.getNames();\n\n        this.loadMessages();\n    }\n\n    myChangeHandler = event => {\n        this.setState({\n            messageText: event.target.value\n        });\n    };\n\n\n    displayUsername(id) {\n        console.log(\"ID\" + id);\n        console.log(this.state.recipientName);\n        if(id===this.state.recipientid){\n            return this.state.recipientName\n        }\n        if(id === sessionStorage.getItem(\"user\")){\n            return this.state.senderName\n        }\n    }\n\n\n    render() {\n        return (\n            <div className=\"messagePage-settings\">\n                <Navbar/>\n\n                <div className=\"messagePage-main\">\n                    <div className=\"messagePage-friends\">\n                        {this.state.conversations.map(conversation => (\n                            <MessagePageFriend convo={conversation} func={this.getRecip}/>\n\n                        ))}\n\n                    </div>\n                    <div className=\"messagePage-messages\">\n                        <div className=\"messagePagemessages-messages\">\n                            {this.state.messages.map(message => (\n\n                                <Message text={message[0]} userName={this.displayUsername(message[0].user_id)}/>\n                            ))}\n                        </div>\n                        <div className=\"messagePageInput-container\">\n                        <textarea className=\"messagePageInput-textArea\" rows=\"4\" cols=\"150\"\n                                  onChange={this.myChangeHandler} defaultValue=\"Input your stuff here...........\">\n                        </textarea>\n                            <button className=\"messagePageInput-send\" onClick={this.submitHandler}>Send</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}